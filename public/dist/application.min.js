"use strict";var ApplicationConfiguration=function(){var applicationModuleName="verdantree",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.utils","ui.grid","ui.grid.edit","ui.grid.cellNav","ui.grid.selection","ui.grid.importer","formly","foundation"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("invoices"),ApplicationConfiguration.registerModule("orders"),ApplicationConfiguration.registerModule("organizations"),ApplicationConfiguration.registerModule("plants"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").config(["formlyConfigProvider",function(formlyConfigProvider){formlyConfigProvider.setType({name:"input",templateUrl:"/modules/core/views/forms/input.html"}),formlyConfigProvider.setType({name:"select",templateUrl:"/modules/core/views/forms/select.html"}),formlyConfigProvider.setType({name:"password",templateUrl:"/modules/core/views/forms/password.html"}),formlyConfigProvider.setType({name:"date",templateUrl:"/modules/core/views/forms/date.html"}),formlyConfigProvider.setType({name:"repeatSection",templateUrl:"/modules/core/views/forms/repeatSection.html",controller:function($scope){function copyFields(fields){return angular.copy(fields)}function addNew(){$scope.model[$scope.options.key]=$scope.model[$scope.options.key]||[];var repeatsection=$scope.model[$scope.options.key],lastSection=repeatsection[repeatsection.length-1],newsection={};lastSection&&(newsection=angular.copy(lastSection)),repeatsection.push(newsection)}$scope.formOptions={formState:$scope.formState},$scope.addNew=addNew,$scope.copyFields=copyFields}})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").factory("FormlyForms",["StatesList",function(StatesList){return{createUser:function(model){var form=[{type:"input",key:"email",templateOptions:{"class":"user-signup-email",key:"email",required:!0,lable:"Email",placeholder:"you@mail.com"}},{type:"password",key:"password",templateOptions:{"class":"user-signup-password",key:"password",required:!0,lable:"Password",placeholder:"********"}}];return form},signinUser:function(model){var form=[{type:"input",key:"email",templateOptions:{"class":"user-signin-email",key:"email",required:!0,lable:"Email",placeholder:"you@mail.com"}},{type:"password",key:"password",templateOptions:{"class":"user-signin-password",key:"password",required:!0,lable:"Password",placeholder:"********"}}];return form},createOrganization:function(model){var form=[{type:"input",key:"name",templateOptions:{required:!0,lable:"Organizations Name",placeholder:"Clear Water Greenery"}},{type:"select",key:"type",templateOptions:{required:!0,lable:"Organizations Type",placeholder:"vendor",options:[{display:"vendor",id:"Vendor"},{display:"broker",id:"Broker"}],valueProp:"display",labelProp:"id"}},{type:"input",key:"description",templateOptions:{required:!0,lable:"Describe your organizations",placeholder:"we are the best greenhouse in the land"}},{model:model.contact,type:"input",key:"phone",templateOptions:{label:"Phone",placeholder:"123-456-7890"}},{model:model.contact,type:"input",key:"email",templateOptions:{label:"Email",placeholder:"you@mail.com"}},{model:model.contact,type:"input",key:"website",templateOptions:{label:"Website",placeholder:"http://www.yourbusiness.com"}},{model:model.contact.address,type:"input",key:"street",templateOptions:{label:"Street",placeholder:"123 Green Street"}},{model:model.contact.address,type:"input",key:"city",templateOptions:{label:"City",placeholder:"Greenville"}},{model:model.contact.address,type:"select",key:"state",templateOptions:{label:"State",placeholder:"Michigan",options:StatesList,valueProp:"abbreviation",labelProp:"name"}},{model:model.contact.address,type:"input",key:"zip",templateOptions:{label:"Phone",placeholder:"123-456-7890"}}];return form},createPlant:function(model){var form=[{type:"input",key:"commonName",templateOptions:{required:!0,lable:"Common Name",placeholder:"Big Leaf Maple"},id:"common-name-input"},{type:"input",key:"scientificName",templateOptions:{lable:"Scientific Name",placeholder:"Acer Macrophyllum Pursh"},id:"scientific-name-input"},{type:"input",key:"unitSize",templateOptions:{required:!0,lable:"Size",placeholder:"2ft"}},{type:"input",key:"unitPrice",templateOptions:{required:!0,lable:"Unit Price",placeholder:"$1"}},{type:"input",key:"unitRoyalty",templateOptions:{lable:"Royalty",placeholder:"$0.25"}},{type:"repeatSection",key:"unitAvailability",templateOptions:{buttonText:"Add new availability",fields:[{type:"date",key:"date",templateOptions:{required:!0,lable:"Date Available"}},{type:"input",key:"quantity",templateOptions:{required:!0,lable:"Quantity Available",placeholder:"100"}}]}}];return form}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("StatesList",["$resource",function($resource){var states=[{name:"Alabama",abbreviation:"AL"},{name:"Alaska",abbreviation:"AK"},{name:"American Samoa",abbreviation:"AS"},{name:"Arizona",abbreviation:"AZ"},{name:"Arkansas",abbreviation:"AR"},{name:"California",abbreviation:"CA"},{name:"Colorado",abbreviation:"CO"},{name:"Connecticut",abbreviation:"CT"},{name:"Delaware",abbreviation:"DE"},{name:"District Of Columbia",abbreviation:"DC"},{name:"Federated States Of Micronesia",abbreviation:"FM"},{name:"Florida",abbreviation:"FL"},{name:"Georgia",abbreviation:"GA"},{name:"Guam",abbreviation:"GU"},{name:"Hawaii",abbreviation:"HI"},{name:"Idaho",abbreviation:"ID"},{name:"Illinois",abbreviation:"IL"},{name:"Indiana",abbreviation:"IN"},{name:"Iowa",abbreviation:"IA"},{name:"Kansas",abbreviation:"KS"},{name:"Kentucky",abbreviation:"KY"},{name:"Louisiana",abbreviation:"LA"},{name:"Maine",abbreviation:"ME"},{name:"Marshall Islands",abbreviation:"MH"},{name:"Maryland",abbreviation:"MD"},{name:"Massachusetts",abbreviation:"MA"},{name:"Michigan",abbreviation:"MI"},{name:"Minnesota",abbreviation:"MN"},{name:"Mississippi",abbreviation:"MS"},{name:"Missouri",abbreviation:"MO"},{name:"Montana",abbreviation:"MT"},{name:"Nebraska",abbreviation:"NE"},{name:"Nevada",abbreviation:"NV"},{name:"New Hampshire",abbreviation:"NH"},{name:"New Jersey",abbreviation:"NJ"},{name:"New Mexico",abbreviation:"NM"},{name:"New York",abbreviation:"NY"},{name:"North Carolina",abbreviation:"NC"},{name:"North Dakota",abbreviation:"ND"},{name:"Northern Mariana Islands",abbreviation:"MP"},{name:"Ohio",abbreviation:"OH"},{name:"Oklahoma",abbreviation:"OK"},{name:"Oregon",abbreviation:"OR"},{name:"Palau",abbreviation:"PW"},{name:"Pennsylvania",abbreviation:"PA"},{name:"Puerto Rico",abbreviation:"PR"},{name:"Rhode Island",abbreviation:"RI"},{name:"South Carolina",abbreviation:"SC"},{name:"South Dakota",abbreviation:"SD"},{name:"Tennessee",abbreviation:"TN"},{name:"Texas",abbreviation:"TX"},{name:"Utah",abbreviation:"UT"},{name:"Vermont",abbreviation:"VT"},{name:"Virgin Islands",abbreviation:"VI"},{name:"Virginia",abbreviation:"VA"},{name:"Washington",abbreviation:"WA"},{name:"West Virginia",abbreviation:"WV"},{name:"Wisconsin",abbreviation:"WI"},{name:"Wyoming",abbreviation:"WY"}];return states}]),angular.module("core").factory("_",["$window",function($window){return $window._}]),angular.module("invoices").config(["$stateProvider",function($stateProvider){$stateProvider.state("listInvoices",{url:"/invoices",templateUrl:"modules/invoices/views/list-invoices.client.view.html"}).state("createInvoice",{url:"/invoices/create",templateUrl:"modules/invoices/views/create-invoice.client.view.html"}).state("viewInvoice",{url:"/invoices/:invoiceId",templateUrl:"modules/invoices/views/view-invoice.client.view.html"}).state("editInvoice",{url:"/invoices/:invoiceId/edit",templateUrl:"modules/invoices/views/edit-invoice.client.view.html"})}]),angular.module("invoices").controller("InvoicesController",["$scope","$stateParams","$location","Authentication","Invoices","_",function($scope,$stateParams,$location,Authentication,Invoices,_){var invoiceSubTotal,invoiceTotal;$scope.authentication=Authentication,$scope.adjustments={discount:0,markup:0,taxes:{stateTaxes:0,federalTaxes:0,otherTaxes:0}},$scope.shipping={amount:0,taxes:{stateTaxes:0,federalTaxes:0,otherTaxes:0},terms:{shipDate:"",deliveryDate:"",carrier:""},memo:""},$scope.terms=0,$scope.memo="",$scope.create=function(order,adjustments){for(var adjustments=$scope.adjustments,plantPrices=[],i=order.plants.length-1;i>=0;i--){var plantSubtotal=order.plants[i].unitPrice+order.plants[i].unitRoyalty;plantPrices.push(plantSubtotal)}if(plantPrices.length>1)var plantSum=_.reduce(plantPrices,function(memo,num){return memo+num},0),plantTotal=plantSum;else plantTotal=plantPrices[0];invoiceSubTotal=adjustments.discount&&!adjustments.markup?plantTotal*(1-adjustments.discount/100):adjustments.markup&&adjustments.discount?adjustments.markup>adjustments.discount?plantTotal*(1+(adjustments.markup-adjustments.discount)/100):plantTotal*(1-(adjustments.discount-adjustments.markup)/100):adjustments.markup&&!adjustments.discount?plantTotal*(1+adjustments.markup/100):plantTotal,invoiceTotal=invoiceSubTotal*(1+(adjustments.taxes.stateTaxes+adjustments.taxes.federalTaxes+adjustments.taxes.otherTaxes)/100),$scope.invoice={createdUser:$scope.authentication.user._id,invoicer:$scope.authentication.user.organization,invoicee:order.createdOrganization,amount:Math.round(100*invoiceTotal)/100,discount:adjustments.discount,markup:adjustments.markup,taxes:adjustments.taxes,terms:$scope.terms,plants:order.plants,order:order._id,shipping:$scope.shipping,memo:$scope.memo};var invoice=new Invoices($scope.invoice);invoice.$save(function(response){$location.path("invoices/"+response._id),$scope.invoice={}},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(invoice){if(invoice){invoice.$remove();for(var i in $scope.invoices)$scope.invoices[i]===invoice&&$scope.invoices.splice(i,1)}else $scope.invoice.$remove(function(){$location.path("invoices")})},$scope.update=function(){var invoice=$scope.invoice;invoice.$update(function(){$location.path("invoices/"+invoice._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.invoices=Invoices.query()},$scope.findOne=function(){$scope.invoice=Invoices.get({invoiceId:$stateParams.invoiceId})}}]),angular.module("invoices").factory("Invoices",["$resource",function($resource){return $resource("invoices/:invoiceId",{invoiceId:"@_id"},{update:{method:"PUT"}})}]),angular.module("orders").config(["$stateProvider",function($stateProvider){$stateProvider.state("listOrders",{url:"/orders",templateUrl:"modules/orders/views/list-orders.client.view.html"}).state("createOrder",{url:"/orders/create",templateUrl:"modules/orders/views/create-order.client.view.html"}).state("viewOrder",{url:"/orders/:orderId",templateUrl:"modules/orders/views/view-order.client.view.html"}).state("editOrder",{url:"/orders/:orderId/edit",templateUrl:"modules/orders/views/edit-order.client.view.html"})}]),angular.module("orders").controller("OrdersController",["$scope","$stateParams","$location","Authentication","Orders","Organizations",function($scope,$stateParams,$location,Authentication,Orders,Organizations){$scope.authentication=Authentication,$scope.plants=[],$scope.addToOrder=function(plant){$scope.plants.push(plant._id)},$scope.create=function(status){var order=new Orders($scope.order);"submit"===status?order.submitted=!0:"save"===status&&(order.submitted=!1),order.plants=$scope.plants,$scope.plants.length<1&&($scope.plantsMessage="Add plants to your order"),Orders.get(function(lastOrder){lastOrder.length<1?order.orderNumber=1:order.orderNumber=lastOrder.orderNumber+1,order.$save(function(response){response.submitted===!0?Organizations.get({organizationId:order.vendor},function(organization){organization.orders.push(order._id),organization.$save(),$scope.message='Your order has been submitted. You can check the status in "My Orders"'}):$scope.message="Your order has been saved.",$location.path("/organizations/"+$scope.authentication.user.organization)},function(errorResponse){$scope.error=errorResponse.data.message})})},$scope.remove=function(order){if(order){order.$remove();for(var i in $scope.orders)$scope.orders[i]===order&&$scope.orders.splice(i,1);Organizations.get({organizationId:order.vendor},function(org){for(var i=org.orders.length-1;i>=0;i--)org.orders[i]===order._id&&org.orders.splice(i,1)}),$location.path("/organizations"+$scope.authentication.user.organization),$scope.message="order successfully deleted"}else $scope.order.$remove(function(){$location.path("/organizations"+$scope.authentication.user.organization),$scope.message="order successfully deleted"})},$scope.update=function(){var order=$scope.order;order.$update(function(){$location.path("/organizations/"+$scope.authentication.user.organization)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.orders=Orders.query()},$scope.findOne=function(){$scope.order=Orders.get({orderId:$stateParams.orderId})}}]),angular.module("orders").factory("Orders",["$resource",function($resource){return $resource("orders/:orderId",{orderId:"@_id"},{update:{method:"PUT"}})}]),angular.module("organizations").config(["$stateProvider",function($stateProvider){$stateProvider.state("listOrganizations",{url:"/organizations",templateUrl:"modules/organizations/views/list-organizations.client.view.html"}).state("createOrganization",{url:"/organizations/create",templateUrl:"modules/organizations/views/create-organization.client.view.html"}).state("viewOrganization",{url:"/organizations/:organizationId",controller:"OrganizationsController",templateUrl:"modules/organizations/views/view-organization.client.view.html"}).state("editOrganization",{url:"/organizations/:organizationId/edit",templateUrl:"modules/organizations/views/edit-organization.client.view.html"})}]),angular.module("organizations").controller("OrganizationGridController",["$scope","$stateParams","Organizations","Authentication","Plants","Permissions","PlantQuery",function($scope,$stateParams,Organizations,Authentication,Plants,Permissions,PlantQuery){$scope.authentication=Authentication,Permissions.userPermissions($scope.authentication.user,$stateParams.organizationId,function(permission){$scope.userPermission=permission}),PlantQuery.findPlants($stateParams.organizationId,function(orgPlants){$scope.plantsGrid.data=orgPlants}),$scope.plantsGrid={enableGridMenu:!0,enableFiltering:!0,showSelectionCheckbox:!0,enableCellEditOnFocus:!0,enableRowSelection:!0,enableSelectAll:!1,columnDefs:[{name:"commonName",displayName:"Common Name",enableFiltering:!0},{name:"scientificName",displayName:"Scientific Name",visible:!0},{name:"unitSize",displayName:"Size",visible:!0},{name:"unitMeasure",displayName:"Units",visible:!0,enableFiltering:!1},{name:"unitPrice",displayName:"Price",visible:!0,enableFiltering:!1},{name:"_id",visible:!1},{name:"delete",displayName:"",enableColumnMenu:!1,enableSorting:!1,enableCellEdit:!1,cellTemplate:'<div class="button" ng-click="grid.appScope.remove(row.entity)">Delete</div>'}],importerDataAddCallback:function(grid,newObjects){for(var i=newObjects.length-1;i>=0;i--)Plants.find().$add(newObjects[i])},onRegisterApi:function(gridApi){$scope.gridApi=gridApi,gridApi.edit.on.afterCellEdit($scope,$scope.update)}},$scope.update=function(plant){Plants.update({plantId:plant._id},plant,function(){$scope.message=plant.commonName+", successfully updated"})},$scope.remove=function(plant){Plants["delete"]({plantId:plant._id},plant,function(){$scope.plantsGrid.data.splice(plant.$index,1),$scope.message=plant.commonName+", successfully deleted"})}}]),angular.module("organizations").controller("OrganizationsController",["$scope","$stateParams","$location","Authentication","Organizations","FormlyForms",function($scope,$stateParams,$location,Authentication,Organizations,FormlyForms){$scope.authentication=Authentication,$scope.orgObj={type:"",name:"",description:"",owner:"",members:[],mailingList:"",contact:{phone:0,email:"",website:"",address:{street:"",city:"",state:"",zip:0}}},$scope.formCreateOrg=FormlyForms.createOrganization($scope.orgObj),$scope.create=function(){var user=$scope.authentication.user,organization=new Organizations($scope.orgObj);"admin"!==user.role?organization.type===user.role:$scope.error="admin can't make an organization",organization.members=[],organization.owner=user._id,organization.members.push({memberId:user._id,memberPermission:"admin"}),organization.$save(function(response){$location.path("organizations/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(organization){if(organization){organization.$remove();for(var i in $scope.organizations)$scope.organizations[i]===organization&&$scope.organizations.splice(i,1)}else $scope.organization.$remove(function(){$location.path("organizations")})},$scope.update=function(){var organization=$scope.organization;organization.$update(function(){$location.path("organizations/"+organization._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.organizations=Organizations.query()},$scope.findOne=function(){$scope.organization=Organizations.get({organizationId:$stateParams.organizationId})}}]),angular.module("organizations").factory("Organizations",["$resource",function($resource){return $resource("organizations/:organizationId",{organizationId:"@_id"},{update:{method:"PUT"}})}]),angular.module("plants").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPlants",{url:"/plants",templateUrl:"modules/plants/views/list-plants.client.view.html"}).state("createPlant",{url:"/plants/create",templateUrl:"modules/plants/views/create-plant.client.view.html"}).state("viewPlant",{url:"/plants/:plantId",templateUrl:"modules/plants/views/view-plant.client.view.html"}).state("editPlant",{url:"/plants/:plantId/edit",templateUrl:"modules/plants/views/edit-plant.client.view.html"})}]),angular.module("plants").controller("PlantsController",["$scope","$stateParams","$location","Authentication","Plants","Organizations","FormlyForms",function($scope,$stateParams,$location,Authentication,Plants,Organizations,FormlyForms){$scope.authentication=Authentication,$scope.plantObj={organization:"",commonName:"",scientificName:"",unitSize:"",unitPrice:0,unitRoyalty:0,unitAvailability:[{date:new Date,quantity:"100"}]},$scope.formCreatePlant=FormlyForms.createPlant($scope.plantObj),$scope.create=function(){var user=$scope.authentication.user;$scope.plantObj.organization=user.organization;var plant=new Plants($scope.plantObj);plant.$save(function(response){$location.path("organizations/"+$scope.authentication.user.organization),$scope.plantObj={}},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(plant){if(plant){plant.$remove();for(var i in $scope.plants)$scope.plants[i]===plant&&$scope.plants.splice(i,1)}else $scope.plant.$remove(function(){$location.path("plants")})},$scope.update=function(){var plant=$scope.plant;plant.$update(function(){$location.path("plants/"+plant._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.plants=Plants.query()},$scope.findOne=function(){$scope.plant=Plants.get({plantId:$stateParams.plantId})}}]),angular.module("plants").factory("PlantQuery",["Organizations",function(Organizations){return{findPlants:function(org,callback){Organizations.get({organizationId:org},function(organization){return callback(organization.plants)})}}}]),angular.module("plants").factory("Plants",["$resource",function($resource){return $resource("plants/:plantId",{plantId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication","FormlyForms","FoundationApi",function($scope,$http,$location,Authentication,FormlyForms,FoundationApi){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.credentials={email:"",password:""},$scope.error="testing",$scope.formCreateUser=FormlyForms.createUser($scope.credentials),$scope.formSigninUser=FormlyForms.signinUser($scope.credentials),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$scope.message="signed in",$location.path("/")}).error(function(response){console.log(response.message),$scope.error=response.message})},$scope.signin=function(){console.log("clicked"),$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$scope.message="signed in",FoundationApi.closeActiveElements("signinModal"),$location.path("/")}).error(function(response){console.log(response.message),$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.deleteAccount=function(user){$http["delete"]("/users/delete",user).success(function(response){console.log("User deleted"),$http.get("/auth/signout").success(function(response){$location.path("/")}).error(function(response){console.log("user not signed out"),console.log(response)})}).error(function(response){console.log("User not deleted")})},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Permissions",["Authentication","Organizations","$stateParams",function(Authentication,Organizations,$stateParams){return{userPermissions:function(user,org,callback){Organizations.get({organizationId:org},function(organization){for(var isMember=[],i=organization.members.length-1;i>=0;i--)organization.members[i].memberId===user._id&&isMember.push(organization.members[i]);return callback(isMember.length<1?"user":"owner")})}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);